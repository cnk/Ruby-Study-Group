Chapter 11 exercises

First I transferred all the changes from snapshots/churn-classes.v2.rb
into our working file (keeping the svn_log mocks we created). The
tests from snapshots/churn-tests-classes.rb run

Exercises:

1. What should be moved to a formatter class? 
   One possible answer: everything else - with the exception of month_before

   Or one might argue:
        definitely these:
          header	 
   	  asterisks_for
   	  subsystem_line
       	  order_by_descending_change_count 
   
   I am not so sure about churn_line_to_int.  For one thing, we
   shouldn't be reextracting that count from the subssystem line. The
   loop that creates subsystem_lines shouldn't return a formatted
   line, it should return the subsystem name and the change count and
   the formatter should do what it likes with it. (That has been
   bugging me for a week or two.)

2. I copied snapshots/churn-tests-classes.rb into churn-tests.rb as
   the starting point for this exercise. Then moved all the remaining
   tests except for test_month_before_is_28_days out of the ChurnTests
   class into a new FormatterTests class. I added a setup method that
   created a formatter instance which I then used in all the tests.

3. Moved all the remaining methods (except month_before) into a new
   Formatter class and now the tests pass. Now we need to adjust the
   main method of the script accordingly.

4-7. It was really easy to make the two changes shown in exercise 4 -
   first the very simple changes to use a formatter class - and then
   the change to move the line collecting into the formatter
   class. But I am having a really hard time writing sensible tests
   for the churn code as shown on p 122. I think mostly because I
   fundamentally want to change how the formatter gets, stores, and
   prints out data. So I don't want to write a test that tests the
   *implimentation* of use_subsystem_with_change_count because I want
   to change the content of @subsystem_lines.

   So I couldn't take it any more. I refactored the Formatter class so
   it keeps the data as an array of arrays until the very last minute,
   and then creates the formatted strings in the output method. I was
   tempted to use a hash, but I am not sure how I could do a reverse
   lookup from the key to the value if I have two subsystems with the
   same number of changes (e.g. {:ui => 5, :util => 5}). The churn
   script was easy to get working - but my tests are a mess. I had to
   add 2 attr_reader methods to my Formatter class because my tests
   were looking at data directly. That is probably bad. But what
   should I be doing instead? What should test_use_date and
   test_use_subsystem_with_change_count be testing anyway?

8. Very satisfying refactoring.
